
@using System.Web.UI.WebControls;

@using RadPdf.Web.UI;
@*
    This page relies on the following code being in the <head> element of your View's HTML:
    See: /Views/Shared/_Layout.cshtml
*@
@{
    ViewBag.Title = "RAD PDF Customized Sample";
    @Html.Raw(RadPdf.Web.UI.PdfWebControl.RenderHead())
    const string PdfWebControlID = "PdfWebControl1";
    //Layout = "~/Views/Shared/_SubLayout.cshtml";

}

<script type="text/javascript">
	var api = null;
	var isDownload = false;
    $('#addNotes').show();

    function SetCustomImageTool(key) {
        // Get id
		var id = "@Html.Encode(PdfWebControlID)";
		var docid = $('#docId').text();
        
		// Get api instance
		api = new PdfWebControlApi(id);

        //Set image mode
		api.setMode(api.Mode.InsertImageShape, key + "," + docid);
	}

	@*$('#upload').on('click', function (e) {
		var text = $('#txtnotename').val();
		var id = $('#docId').text();
		var data = new FormData();
        data.append("id", id);
        data.append("acatext", text);
        console.log(data);
        $.ajax({
            type: "POST",
            url: '@Url.Action("SaveNotes", "BuildingPermits")',
            contentType: false,
            processData: false,
            data: data,
            success: function (data) {
				//alert(data);
				$('#addNotes').show();
            },
            error: function () {

            }

        });
    });*@

	function AddNote(key) {
        var text = $('#txtnotename').val();
        // Get id
		var id = "@Html.Encode(PdfWebControlID)";

		// Get api instance
		api = new PdfWebControlApi(id);

		//Set image mode
		api.setMode(api.Mode.InsertImageShape, key + "," + text);
	}

	function AddPermitNo(key) {
		//var text = $('#permitNo').val();
		//alert(text);
  //      var text0 = $('#permitNo').value();
		//alert(text0);
        var text = $('#permitNo').text();

        // Get id
		var id = "@Html.Encode(PdfWebControlID)";

		// Get api instance
		api = new PdfWebControlApi(id);

		//Set image mode
		api.setMode(api.Mode.InsertImageShape, key + "," + text);
	}

	function showViewInformation(view)
	{
		var x = document.getElementById("pageInformation");
        if (x) x.innerHTML = "Page " + view.page + " of " + api.getPageCount();
		// Show page information
		document.getElementById("pageInformation").innerHTML = "Page " + view.page + " of " + api.getPageCount();
	}

	function initRadPdf()
	{
		// Get id
		var id = "@Html.Encode(PdfWebControlID)";

		// Get api instance
		api = new PdfWebControlApi(id);

		// Attach listeners
		api.addEventListener(
			"viewChanged",
			function(evt) {
				// Show new view information
				showViewInformation(evt.view);
			}
			);
		api.addEventListener(
			"printing",
			function(evt) {
				// To cancel printing, we would return false or set evt.cancel = true
				return true;
			}
			);
		api.addEventListener(
			"saved",
			function(evt) {
				// We don't want to show this prompt if we initiated a download
                if (!isDownload) {
                    $("#divAttachmentsDetails").css("display", "none");
                    unloadModal();
                    window.alert("تم حفظ التعديلات");
				}
			}
        );


        function unloadModal() {
            $('#MainModal').modal('hide');
        };
		// Initially show view information
		showViewInformation(api.getView());
	}

	// Additional Code Samples
	function fillOutForm()
	{
		if(api)
		{
			// Get text fields
			var fFirstName = api.getField("First Name");
			var fLastName = api.getField("Last Name");
			var fCreditCardNumber = api.getField("Credit Card Number");
			// Set text values (if the field was found)
			if( fFirstName )
			{
				fFirstName.setProperties( { "value" : "John" } );
			}
			if( fLastName )
			{
				fLastName.setProperties( { "value" : "Smith" } );
			}
			if( fCreditCardNumber )
			{
				fCreditCardNumber.setProperties( { "value" : "5555555555554444" } );
			}

			// Get radio fields
			var fProductTypes = api.getFields("Product Type");
			// Set radio field
			if( fProductTypes )
			{
				// Find and check field with the export value "1"
				for( var i = 0; i < fProductTypes.length; i++ )
				{
					if( fProductTypes[i].getProperties()["exportValue"] == "1" )
					{
						fProductTypes[i].setProperties( { "checked" : true } );
					}
				}
			}

			// Get checkbox field
			var fProductSupport = api.getField("Product Support");
			// Set checkbox field
			if( fProductSupport )
			{
				fProductSupport.setProperties( { "checked" : true } );
			}

			// Get combo field
			var fCardType = api.getField("Card Type");
			// Set combo field
			if( fCardType )
			{
				fCardType.setProperties( { "value" : "MasterCard" } );
			}

			// Get list field
			var fProductOptions = api.getField("Product Options");
			// Set combo field
			if( fProductOptions )
			{
				fProductOptions.setProperties( { "value" : "With PDF Extension" } );
			}
		}
	}
	function watermarkPages()
	{
		if(api)
		{
			//Loop through all pages
			for( var i = 1; i <= api.getPageCount(); i++ )
			{
				//Get page
				var p = api.getPage(i);

				//Add watermark object
				var obj = p.addObject(api.ObjectType.TextShape, 0, 50, p.getWidth(), 120);

				//Set watermark properties
				obj.setProperties(
					{
					"text" : "WATERMARK",
					"opacity" : 50,
					"font" :
						{
						"name" : "Arial",
						"alignment" : api.HorizontalAlignment.AlignCenter,
						"color" : "#ff0000",
						"size" : 110,
						"bold" : true,
						"italic" : false,
						"underline" : false
						},
					"changeable" : false,
					"deletable" : false,
					"duplicatable" : false,
					"hideFocusOutline" : true,
					"movable" : false,
					"resizable" : false,
					"stylable" : false
					} );
			}
		}
	}
	function zoomTo75()
	{
		if(api)
		{
			api.setView( { "zoom" : 50 } );
		}
	}
</script>
<div class="modal-header">
    <div class="row">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>
        <h4 class="modal-title" style="text-align:center" id="myModalLabel">
            تعديل الملف
        </h4>
        <br />
    </div>
    @*<label id="docId">@ViewBag.DocID</label>*@
<div class="row" dir="rtl">
    <div class="col-md-3">
        <button class="btn btn-toolbar" onclick="SetCustomImageTool('signature'); return false;">اضافة توقيع المهندس</button>
    </div>
    <div class="col-md-3">
        <button class="btn btn-toolbar" onclick="SetCustomImageTool('stamp'); return false;">اضافة ختم المهندس</button>
    </div>
    <div class="col-md-3">
        <button class="btn btn-danger" onclick="SetCustomImageTool('stamp_r_CivilDefence'); return false;">اضافة ختم الدفاع المدني</button>
    
        <button class="btn btn-outline-info" onclick="SetCustomImageTool('stamp_r_SupervisionStamp'); return false;">اضافة ختم الاشراف الهندسي</button>
    </div>
    <div class="col-md-3">
        <button class="btn btn-info" onclick="SetCustomImageTool('stamp_r_Rifi'); return false;">اضافة ختم الاسكان الريفي</button>
   
        <button class="btn btn-warning" onclick="SetCustomImageTool('stamp_r_SmallPermit'); return false;">اضافة ختم الاباحة الصغرى</button>
    </div>
    <div class="col-md-3">
        <button class="btn btn-success" onclick="SetCustomImageTool('stamp_r_Permit'); return false;">اضافة ختم الترخيص</button>


        <button class="btn btn-success" onclick="AddPermitNo('dynamicNO'); return false;">اضافة رقم الترخيص</button>
        <label id="permitNo">@ViewBag.PermitNo</label>
    </div>
    <div class="col-md-3">
        <label>ملاحظات المهندس</label>
        <textarea class="form-control" id="txtnotename" style="width:250px; text-align:right"></textarea>
        @*<input type="button" value="upload" id="upload" />*@
        <br />
        <button id="addNotes" class="btn btn-toolbar" onclick="AddNote('dynamic'); return false;">اضافة الملاحظات</button>
    </div>
</div>
</div>

<style>
    .modal-open {
        direction: unset;
    }

    .modal-dialog {
        width: 90%;
        margin-top: 10px auto;
    }
</style>


<div class="modal-body" style="padding:0px">
    <div class="form-group">
        <div>
            <div style="text-align:center">
                @{
                    // Get web control from ViewBag
                    PdfWebControl pdfWebControl1 = ViewBag.PdfWebControl1;
					
                    // Set control's properties
                    pdfWebControl1.ID = PdfWebControlID;
                    pdfWebControl1.Height = new Unit("550px");
                    pdfWebControl1.Width = new Unit("100%");
                    pdfWebControl1.OnClientLoad = "initRadPdf();";
                    pdfWebControl1.HideBookmarks = true;
                    pdfWebControl1.HideBottomBar = true;
                    pdfWebControl1.HideDownloadButton = true;
                    pdfWebControl1.HideObjectPropertiesBar = true;
                    pdfWebControl1.HideSearchText = true;
                    pdfWebControl1.HideSideBar = true;
                    pdfWebControl1.HideThumbnails = true;
                    pdfWebControl1.HideToolsTabs = true;
                    pdfWebControl1.HideTopBar = false;
					pdfWebControl1.HideToolsPageTab = false;
					



                    pdfWebControl1.ViewerPageLayoutDefault = ViewerPageLayout.SinglePageContinuous;

                    // Render web control to body
                    @Html.Raw(pdfWebControl1.RenderControl())
                }

                <div style="text-align:center;">
                    <button onclick="if(api){api.setView( { 'page' : api.getView().page + 1 } );}return false;">التالي</button>
                    <span id="pageInformation" style="padding:0px 5px;"></span>
                    <button onclick="if(api){api.setView( { 'page' : api.getView().page - 1 } );}return false;">السابق</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer" style="text-align:center">
        <button onclick="if(api){isDownload=false;api.save();}return false;" id="btnSave" class="btn btn-primary"><i class="fa fa-save"></i> حفظ التعديلات</button>
    </div>

</div>
